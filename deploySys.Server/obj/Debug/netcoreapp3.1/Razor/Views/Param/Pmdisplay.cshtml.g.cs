#pragma checksum "D:\document\workSpace\projects\dotnetCore\open_microService\deploySys\deploySys.Server\Views\Param\Pmdisplay.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6a596c23bd9a5c414d5b890c800a8bab94cdbd20"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Param_Pmdisplay), @"mvc.1.0.view", @"/Views/Param/Pmdisplay.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6a596c23bd9a5c414d5b890c800a8bab94cdbd20", @"/Views/Param/Pmdisplay.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"495fbe8d9d5ee75fa928b45d133cd21238862f9c", @"/Views/_ViewImports.cshtml")]
    public class Views_Param_Pmdisplay : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\document\workSpace\projects\dotnetCore\open_microService\deploySys\deploySys.Server\Views\Param\Pmdisplay.cshtml"
  
    Layout = "_Layout";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div id=""app"">
    <ve-gauge :data=""chartData""
              width=""1800px""
              height=""700px""
              background-color=""#000""
              :settings=""chartSettings"">
    </ve-gauge>
</div>

<script>
   
      


    var app = new Vue({
        el: '#app',
        data: function () {
            this.chartSettings = {
                dataName: {
                    'PM2.5': 'PM2.5-μg/m3',
                    'PM10': 'PM10-μg/m3',                  
                },
                seriesMap: {
                    'PM2.5': {
                        center: ['70%', '50%'],
                        min: 0,
                        max: 1000,
                        splitNumber: 10,
                        radius: '80%',
                        axisLine: {
                            lineStyle: {
                                color: [[0.04, 'lime'], [0.08, '#1e90ff'], [0.12, '#006400'], [0.15, '#DAA520'], [0.25, '#FF8C00'], [1, '#DC143C']],
                     ");
            WriteLiteral(@"           width: 3,
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        axisLabel: {
                            textStyle: {
                                fontWeight: 'bolder',
                                color: '#fff',
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        axisTick: {
                            length: 15,
                            lineStyle: {
                                color: 'auto',
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        splitLine: {
                            length: 25,
                            lineStyle: {
                                width: 3,
    ");
            WriteLiteral(@"                            color: '#fff',
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        pointer: {
                            shadowColor: '#fff',
                            shadowBlur: 5
                        },
                        title: {
                            textStyle: {
                                fontWeight: 'bolder',
                                fontSize: 20,
                                fontStyle: 'italic',
                                color: '#fff',
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        detail: {
                            backgroundColor: 'rgba(30,144,255,0.8)',
                            borderWidth: 1,
                            borderColor: '#fff',
                     ");
            WriteLiteral(@"       shadowColor: '#fff',
                            shadowBlur: 5,
                            offsetCenter: [0, '50%'],
                            textStyle: {
                                fontWeight: 'bolder',
                                color: '#fff'
                            }
                        }
                    },
                    'PM10': {
                        center: ['20%', '50%'],
                        radius: '80%',
                        min: 0,
                        max: 1000,
                       
                        splitNumber: 10,
                        axisLine: {
                            lineStyle: {
                                color: [[0.05, 'lime'], [0.20, '#1e90ff'], [1, '#ff4500']],
                                width: 2,
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        axisLabel: {
");
            WriteLiteral(@"                            textStyle: {
                                fontWeight: 'bolder',
                                color: '#fff',
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        axisTick: {
                            length: 12,
                            lineStyle: {
                                color: 'auto',
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        splitLine: {
                            length: 10,
                            lineStyle: {
                                width: 3,
                                color: '#fff',
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                ");
            WriteLiteral(@"        pointer: {
                            width: 5,
                            shadowColor: '#fff',
                            shadowBlur: 5
                        },
                        title: {
                            offsetCenter: [0, '-30%'],
                            textStyle: {
                                fontWeight: 'bolder',
                                fontStyle: 'italic',
                                color: '#fff',
                                shadowColor: '#fff',
                                shadowBlur: 10
                            }
                        },
                        detail: {
                            
                            backgroundColor: 'rgba(30,144,255,0.8)',
                            borderWidth: 1,
                            borderColor: '#fff',
                            shadowColor: '#fff',
                            shadowBlur: 5,
                            offsetCenter: [0, '50%'],
               ");
            WriteLiteral(@"             textStyle: {
                                fontWeight: 'bolder',
                                color: '#fff'
                            }
                        }
                    },
                   
                }
            }
            return {
                chartData: {
                    columns: ['type', 'value'],
                    rows: [
                        { type: 'PM2.5', value: 60 },
                        { type: 'PM10', value: 80 },    
                       
                    ]
                }
            }
        }
        

        ,
        methods: {
            A: function () {
                setInterval(() => {
                    this.B();
                }, 20000)
            },
            B: function () {
                var _this = this;
                $vmpa.get(""getSenserValue/pm25"", {}, function (result) {
                    _this.chartData.rows[0].value = result.Data;
                    console.log(""");
            WriteLiteral(@"pm2.5"", result.Data);
                } 
                );
                $vmpa.get(""getSenserValue/pm10"", {}, function (result) {
                    _this.chartData.rows[1].value = result.Data;
                    console.log(""pm10"", result.Data);
                }
                );
               

            }
        },
        mounted() {
            this.A();
        }
    })
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
